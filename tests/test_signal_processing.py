# SPDX-FileCopyrightText: Aresys S.r.l. <info@aresys.it>
# SPDX-License-Identifier: MIT

"""Unittest for signal_processing.py core functionalities"""

import unittest

import numpy as np

import arepyextras.quality.core.generic_dataclasses as gdt
import arepyextras.quality.core.signal_processing as sp

random_rng1 = np.random.default_rng(12345)
raster = random_rng1.random((10, 10)) + random_rng1.random((10, 10)) * 1j
incidence_angles = np.deg2rad(np.linspace(15, 30, 10))


class SignalProcessingTest(unittest.TestCase):
    """Testing signal_processing.py core functionalities"""

    def setUp(self) -> None:
        self.tolerance = 1e-9
        self.expected_radiometric_conversions = [
            np.array(
                [
                    1.465175088147534777e-01,
                    2.057603364396828338e-01,
                    5.773936593509393367e-01,
                    3.656011588363434206e-01,
                    3.502107411023763772e-01,
                    2.564528779488113863e-01,
                    4.060434841626086033e-01,
                    1.978233863424534722e-01,
                    3.777453951930107579e-01,
                    5.088729847865746114e-01,
                    1.436386647994409294e-01,
                    5.822835928934366745e-01,
                    6.057150827708837060e-01,
                    5.209312624482137499e-01,
                    2.422193487944126755e-01,
                    6.981589233088700830e-01,
                    3.873658512926009823e-01,
                    4.464813974366193539e-01,
                    6.339465079199686492e-01,
                    1.514940343054356486e-01,
                    1.965002764888459375e-01,
                    2.363423269681394490e-01,
                    2.796296053986139785e-01,
                    4.000297378787808222e-01,
                    1.534505451671433762e-01,
                    5.288857962951061253e-01,
                    5.173245362116276613e-01,
                    8.992168736535617601e-02,
                    2.836114491418010863e-01,
                    4.421081022282488115e-01,
                    6.991514155073363934e-01,
                    6.858332242608659035e-01,
                    7.057798379236852604e-01,
                    4.674071304885855649e-01,
                    6.580115031004871717e-01,
                    5.985901784883077559e-01,
                    5.686203887414781333e-01,
                    6.972997611019016162e-01,
                    6.610416666866490987e-01,
                    5.483516218684335586e-01,
                    2.862340241428402154e-01,
                    4.573737436833795744e-01,
                    5.822005988040542812e-01,
                    6.838789450927492686e-01,
                    2.708083363789840492e-01,
                    2.170410369055195687e-01,
                    5.077629116995410197e-01,
                    2.240389717794862012e-01,
                    5.860458164536669345e-02,
                    7.410199832719306379e-01,
                    5.423639014791415969e-01,
                    5.720122378785913453e-01,
                    5.121852665398048954e-01,
                    1.603411690369549170e-01,
                    4.036832182516938428e-01,
                    4.025756893641040945e-01,
                    1.455907446028218699e-01,
                    1.798762000134955519e-01,
                    3.546806664280438559e-01,
                    6.939351205136210510e-01,
                    6.960328385767714510e-01,
                    5.217085605430563655e-01,
                    5.293146600014271286e-01,
                    5.309065755969666345e-01,
                    4.832253792110565715e-01,
                    1.887670418533631544e-01,
                    6.882788703931851382e-01,
                    6.242660870243120774e-01,
                    7.500644401117979587e-01,
                    6.491680746364104637e-01,
                    9.250055425010179633e-01,
                    3.785132433070425573e-01,
                    7.557299414937276305e-01,
                    6.152362251450408381e-01,
                    1.691124416919169982e-01,
                    5.832067836113148385e-01,
                    1.830502574457118781e-01,
                    6.314214024986132268e-01,
                    4.382799170057471438e-01,
                    5.383180409045146275e-01,
                    4.838413936349066358e-01,
                    1.674682341379131745e-01,
                    2.191732279469188194e-01,
                    8.170313776293233188e-01,
                    3.679131213059638750e-01,
                    6.896030401631878526e-01,
                    7.983959623502534519e-01,
                    6.057411326039963129e-01,
                    3.201113248692510904e-01,
                    3.022337974737275834e-01,
                    5.287959821301353447e-01,
                    1.839010857407516186e-01,
                    8.768782166137815137e-01,
                    9.986689568131662531e-01,
                    4.929747402848256854e-01,
                    4.395809252352400054e-01,
                    2.361960320054455886e-01,
                    8.012820074926236824e-01,
                    5.825084829916709062e-01,
                    4.420425753746235475e-01,
                ]
            ).reshape(raster.shape),
            np.array(
                [
                    1.439996428494818848e-01,
                    2.022243976135639221e-01,
                    5.674712967937011188e-01,
                    3.593183963041074458e-01,
                    3.441924589678562740e-01,
                    2.520458007448189153e-01,
                    3.990657305994769199e-01,
                    1.944238419764883763e-01,
                    3.712539370608834988e-01,
                    5.001281325200770400e-01,
                    1.405891278502768293e-01,
                    5.699213550941650830e-01,
                    5.928553800706746202e-01,
                    5.098715722524810312e-01,
                    2.370768834632124011e-01,
                    6.833365811770230058e-01,
                    3.791418366931156303e-01,
                    4.370023235361588099e-01,
                    6.204874347491422526e-01,
                    1.482777230438584448e-01,
                    1.914484197093087592e-01,
                    2.302661645925950795e-01,
                    2.724405635151411764e-01,
                    3.897453098900288126e-01,
                    1.495054607592325724e-01,
                    5.152885874597994409e-01,
                    5.040245576457961230e-01,
                    8.760987644039860966e-02,
                    2.763200374058857878e-01,
                    4.307418748954497389e-01,
                    6.777416091944173937e-01,
                    6.648312550611972238e-01,
                    6.841670523462656250e-01,
                    4.530939274955310681e-01,
                    6.378615062320244222e-01,
                    5.802598147101687420e-01,
                    5.512077766541554347e-01,
                    6.759466571874895857e-01,
                    6.407988784513418690e-01,
                    5.315596913149367442e-01,
                    2.759372485384110063e-01,
                    4.409205116814590153e-01,
                    5.612569358674005526e-01,
                    6.592775789228779715e-01,
                    2.610664733008488669e-01,
                    2.092333597411391022e-01,
                    4.894970162397731528e-01,
                    2.159795559711502611e-01,
                    5.649638284405068822e-02,
                    7.143630667540630252e-01,
                    5.197125801747636276e-01,
                    5.481226815218938064e-01,
                    4.907943277105034641e-01,
                    1.536446700106174623e-01,
                    3.868237660336038553e-01,
                    3.857624920546063318e-01,
                    1.395102832632152123e-01,
                    1.723638386811790213e-01,
                    3.398677599757483625e-01,
                    6.649535689459772358e-01,
                    6.626246467258823936e-01,
                    4.966675873089304583e-01,
                    5.039086091217381824e-01,
                    5.054241159349923684e-01,
                    4.600315221382901276e-01,
                    1.797065992997373129e-01,
                    6.552428535925605146e-01,
                    5.943025565047508341e-01,
                    7.140628388554218775e-01,
                    6.180092982412169755e-01,
                    8.744275789794350162e-01,
                    3.578166873051647490e-01,
                    7.144077226995675378e-01,
                    5.815959993055204169e-01,
                    1.598656182795803182e-01,
                    5.513178812515753258e-01,
                    1.730413344519392271e-01,
                    5.968961945998870755e-01,
                    4.143154058368481163e-01,
                    5.088835899905638227e-01,
                    4.539353930558766570e-01,
                    1.571171042573707710e-01,
                    2.056262376147225956e-01,
                    7.665310666309105292e-01,
                    3.451725907032612284e-01,
                    6.469790125588384955e-01,
                    7.490474972820524435e-01,
                    5.683005686077982066e-01,
                    3.003253999921464690e-01,
                    2.835528738463621856e-01,
                    4.921001104439709506e-01,
                    1.711392439844952873e-01,
                    8.160271292215686145e-01,
                    9.293661838447575541e-01,
                    4.587646887236543902e-01,
                    4.090761449925111037e-01,
                    2.198051750849026875e-01,
                    7.456769296837205685e-01,
                    5.420852247402416779e-01,
                    4.113669685736307535e-01,
                ]
            ).reshape(raster.shape),
            np.array(
                [
                    5.468107870950806859e-01,
                    7.679080297753620998e-01,
                    2.154862472665822537e00,
                    1.364442100083292697e00,
                    1.307004279150418613e00,
                    9.570951702522241256e-01,
                    1.515374912977143662e00,
                    7.382869287553633919e-01,
                    1.409765007185500130e00,
                    1.899139833822720780e00,
                    4.797865531016500817e-01,
                    1.944962648824857254e00,
                    2.023229275558220408e00,
                    1.740031593595628534e00,
                    8.090689691028782882e-01,
                    2.332013206884291812e00,
                    1.293892050865727450e00,
                    1.491351726216807005e00,
                    2.117528802641261532e00,
                    5.060253145373919681e-01,
                    5.930044557067631894e-01,
                    7.132409962393457814e-01,
                    8.438746495011402171e-01,
                    1.207221797424753218e00,
                    4.630876792680403420e-01,
                    1.596087493448490324e00,
                    1.561197574382770181e00,
                    2.713683778218684561e-01,
                    8.558911775377920916e-01,
                    1.334207153343596186e00,
                    1.920902726886142942e00,
                    1.884311297168487220e00,
                    1.939114167801668343e00,
                    1.284190536709468811e00,
                    1.807871746509983613e00,
                    1.644612998903937529e00,
                    1.562271678308720491e00,
                    1.915815348218577574e00,
                    1.816197052540217349e00,
                    1.506583699004840682e00,
                    7.204941835958696972e-01,
                    1.151278654032038773e00,
                    1.465486663860140260e00,
                    1.721426387720826012e00,
                    6.816654023386212735e-01,
                    5.463250050734925756e-01,
                    1.278115785224247958e00,
                    5.639398619689103276e-01,
                    1.475165656284267435e-01,
                    1.865258993841000468e00,
                    1.257340851083365907e00,
                    1.326073420526178825e00,
                    1.187378911441593576e00,
                    3.717126110178260445e-01,
                    9.358428903922488828e-01,
                    9.332753498344725784e-01,
                    3.375172835609765443e-01,
                    4.169999031974812032e-01,
                    8.222422063364456246e-01,
                    1.608722432749867925e00,
                    1.492647239229798251e00,
                    1.118807618573663953e00,
                    1.135118951500224238e00,
                    1.138532825511725521e00,
                    1.036280169883966318e00,
                    4.048122276186546520e-01,
                    1.476018800798686970e00,
                    1.338742943863059365e00,
                    1.608518382647877720e00,
                    1.392145428631647475e00,
                    1.841837467015327912e00,
                    7.536818335157516868e-01,
                    1.504782033440537292e00,
                    1.225036044079667708e00,
                    3.367305566672050277e-01,
                    1.161260182472515723e00,
                    3.644830295813526466e-01,
                    1.257263381852689710e00,
                    8.726870652028172470e-01,
                    1.071879347044165209e00,
                    8.973399410000900689e-01,
                    3.105892495301845746e-01,
                    4.064821530815351247e-01,
                    1.515279382545631437e00,
                    6.823375240502251859e-01,
                    1.278948761958249136e00,
                    1.480717845093441509e00,
                    1.123417134918286431e00,
                    5.936835524006123244e-01,
                    5.605276058665471517e-01,
                    9.159015078876787674e-01,
                    3.185260240700623080e-01,
                    1.518797623225457638e00,
                    1.729745373142213438e00,
                    8.538572970213902380e-01,
                    7.613764965455718237e-01,
                    4.091035279795965374e-01,
                    1.387861148168010317e00,
                    1.008934288381445388e00,
                    7.656401996574432323e-01,
                ]
            ).reshape(raster.shape),
            np.array(
                [
                    2.781859480094330261e-01,
                    3.906675367213815475e-01,
                    1.096270362501569506e00,
                    6.941498377018157084e-01,
                    6.649287706619857463e-01,
                    4.869150966942581427e-01,
                    7.709357911459008283e-01,
                    3.755980204228695496e-01,
                    7.172075318372073127e-01,
                    9.661733593097280304e-01,
                    2.569449538582709858e-01,
                    1.041605553193743372e00,
                    1.083520472785885147e00,
                    9.318567488773268348e-01,
                    4.332889023053843602e-01,
                    1.248886660049460584e00,
                    6.929311193864189367e-01,
                    7.986786999385631081e-01,
                    1.134021653943572128e00,
                    2.709968636144339249e-01,
                    3.325823374203319971e-01,
                    4.000161472489631165e-01,
                    4.732811039106863960e-01,
                    6.770617713045286035e-01,
                    2.597194360335147167e-01,
                    8.951543351656533476e-01,
                    8.755865718485065230e-01,
                    1.521950274225088995e-01,
                    4.800204883177453530e-01,
                    7.482806063119430418e-01,
                    1.123391711766055234e00,
                    1.101992133176711519e00,
                    1.134042215561727796e00,
                    7.510265798864312892e-01,
                    1.057288381935707733e00,
                    9.618106040311268368e-01,
                    9.136553508796635414e-01,
                    1.120416486133978040e00,
                    1.062157228057573066e00,
                    8.810876349202044766e-01,
                    4.377890965161481684e-01,
                    6.995438037702748080e-01,
                    8.904639303620780488e-01,
                    1.045978885267544012e00,
                    4.141958219936591190e-01,
                    3.319598350976548651e-01,
                    7.766130075662117660e-01,
                    3.426630336259466891e-01,
                    8.963451122578115771e-02,
                    1.133374936639741204e00,
                    7.913058099553956781e-01,
                    8.345625620814383083e-01,
                    7.472753553125022208e-01,
                    2.339368425663228834e-01,
                    5.889714914891738262e-01,
                    5.873556132180478562e-01,
                    2.124160582327689617e-01,
                    2.624383403010310811e-01,
                    5.174770504783613445e-01,
                    1.012447345955313605e00,
                    9.703564829685011883e-01,
                    7.273267235182060420e-01,
                    7.379305736678988259e-01,
                    7.401499023157093182e-01,
                    6.736763748261600515e-01,
                    2.631647713744957873e-01,
                    9.595464853956002793e-01,
                    8.703046911982810219e-01,
                    1.045683266316670856e00,
                    9.050211640124232737e-01,
                    1.233892517742245509e00,
                    5.049101192627675205e-01,
                    1.008090738269137754e00,
                    8.206819742916449112e-01,
                    2.255841363897000962e-01,
                    7.779569456944419592e-01,
                    2.441762050661518968e-01,
                    8.422718657218167815e-01,
                    5.846346701965717818e-01,
                    7.180785112290434258e-01,
                    6.181886611335570825e-01,
                    2.139688021861068656e-01,
                    2.800306177256569606e-01,
                    1.043894838443475637e00,
                    4.700708183831445730e-01,
                    8.810837305784331441e-01,
                    1.020084964851451614e00,
                    7.739360556665141333e-01,
                    4.089959931868358267e-01,
                    3.861544486840179924e-01,
                    6.476401671263617432e-01,
                    2.252319116043304814e-01,
                    1.073952098632732000e00,
                    1.223114683074914000e00,
                    6.037682848894410093e-01,
                    5.383744837434297770e-01,
                    2.892798788417131894e-01,
                    9.813660292149478659e-01,
                    7.134242770861436433e-01,
                    5.413893771268001309e-01,
                ]
            ).reshape(raster.shape),
            np.array(
                [
                    5.563718960188660523e-01,
                    7.813350734427630950e-01,
                    2.192540725003139013e00,
                    1.388299675403631417e00,
                    1.329857541323971493e00,
                    9.738301933885162853e-01,
                    1.541871582291801657e00,
                    7.511960408457390992e-01,
                    1.434415063674414625e00,
                    1.932346718619456061e00,
                    4.901936652572481679e-01,
                    1.987151085107441206e00,
                    2.067115403360478609e00,
                    1.777774843863414445e00,
                    8.266185887173403968e-01,
                    2.382597206864047301e00,
                    1.321958030630157488e00,
                    1.523700829329112993e00,
                    2.163460393677594684e00,
                    5.170015750597386495e-01,
                    6.086523967261077139e-01,
                    7.320616862600135555e-01,
                    8.661424429654841495e-01,
                    1.239077435778861647e00,
                    4.753074334743302987e-01,
                    1.638204348927137177e00,
                    1.602393770007252138e00,
                    2.785291273403705525e-01,
                    8.784760578640731232e-01,
                    1.369413625474105611e00,
                    1.981583899136248883e00,
                    1.943836548913876028e00,
                    2.000370638096620635e00,
                    1.324758018898608558e00,
                    1.864982278615847422e00,
                    1.696566199487409055e00,
                    1.611623722785531898e00,
                    1.976335810560311712e00,
                    1.873570580435604427e00,
                    1.554176564415944428e00,
                    7.473798866753885717e-01,
                    1.194239356226208360e00,
                    1.520172239689352667e00,
                    1.785662518681003785e00,
                    7.071021845141408635e-01,
                    5.667114734250002783e-01,
                    1.325809496409097177e00,
                    5.849836400157091276e-01,
                    1.530212409930523654e-01,
                    1.934862330851337520e00,
                    1.312141201687602177e00,
                    1.383869433682976435e00,
                    1.239130018224619434e00,
                    3.879134537648358250e-01,
                    9.766309698217756630e-01,
                    9.739515247453196523e-01,
                    3.522277460884559730e-01,
                    4.351745619445224200e-01,
                    8.580790767841159905e-01,
                    1.678837511937530058e00,
                    1.567903488118647548e00,
                    1.175215631390922999e00,
                    1.192349348668030329e00,
                    1.195935343288830666e00,
                    1.088527315983675470e00,
                    4.252220397659901008e-01,
                    1.550436677520077522e00,
                    1.406239650073118241e00,
                    1.689616619770066386e00,
                    1.462334579901331866e00,
                    1.948371604843083915e00,
                    7.972757150432875362e-01,
                    1.591820471642723778e00,
                    1.295893631190998985e00,
                    3.562074650140274468e-01,
                    1.228428895537023502e00,
                    3.855651749957474950e-01,
                    1.329985037702776873e00,
                    9.231643552730833813e-01,
                    1.133878162975396231e00,
                    9.564581529872132615e-01,
                    3.310513734764150562e-01,
                    4.332618571790418094e-01,
                    1.615108448058096835e00,
                    7.272910277899701237e-01,
                    1.363207982545098007e00,
                    1.578269940413961292e00,
                    1.197429679437420180e00,
                    6.327963885739041894e-01,
                    5.974560744593097050e-01,
                    9.842002208879421232e-01,
                    3.422784879689906856e-01,
                    1.632054258443137451e00,
                    1.858732367689515330e00,
                    9.175293774473088915e-01,
                    8.181522899850223185e-01,
                    4.396103501698055416e-01,
                    1.491353859367441359e00,
                    1.084170449480483578e00,
                    8.227339371472616181e-01,
                ]
            ).reshape(raster.shape),
            np.array(
                [
                    2.879992856989637695e-01,
                    4.044487952271278441e-01,
                    1.134942593587402238e00,
                    7.186367926082148916e-01,
                    6.883849179357125481e-01,
                    5.040916014896378305e-01,
                    7.981314611989538399e-01,
                    3.888476839529767526e-01,
                    7.425078741217669975e-01,
                    1.000256265040154080e00,
                    2.682127001967145041e-01,
                    1.087282835358136301e00,
                    1.131035840013513205e00,
                    9.727212426626691277e-01,
                    4.522898181401925899e-01,
                    1.303653791606616208e00,
                    7.233180640063417988e-01,
                    8.337029682174004197e-01,
                    1.183751637533701384e00,
                    2.828808250305647753e-01,
                    3.503659887934052475e-01,
                    4.214055804986454601e-01,
                    4.985881187650968993e-01,
                    7.132652287470014896e-01,
                    2.736070042701700955e-01,
                    9.430195126887817025e-01,
                    9.224054331911603066e-01,
                    1.603331123532685532e-01,
                    5.056878676572150733e-01,
                    7.882922363194176940e-01,
                    1.195488489445102331e00,
                    1.172715533569971491e00,
                    1.206822518850127368e00,
                    7.992257928537449541e-01,
                    1.125142795153002417e00,
                    1.023537466141556163e00,
                    9.722917161098179051e-01,
                    1.192322320459345386e00,
                    1.130324112973497330e00,
                    9.376338766854527274e-01,
                    4.710714615400413141e-01,
                    7.527257409463327109e-01,
                    9.581603298539006497e-01,
                    1.125498113461650185e00,
                    4.456845380184903949e-01,
                    3.571966637279540002e-01,
                    8.356540339549736185e-01,
                    3.687135594523994753e-01,
                    9.644886212006995030e-02,
                    1.219538339635284574e00,
                    8.617860262154755091e-01,
                    9.088955811469517920e-01,
                    8.138338564452337609e-01,
                    2.547731855425031111e-01,
                    6.414301459928207771e-01,
                    6.396703442870808054e-01,
                    2.313355828122778124e-01,
                    2.858132615345750915e-01,
                    5.635678209093265556e-01,
                    1.102624249747915064e00,
                    1.070669916829547486e00,
                    8.025162466013259221e-01,
                    8.142163007124839647e-01,
                    8.166650589373990465e-01,
                    7.433196365098841962e-01,
                    2.903701977834310943e-01,
                    1.058742404203570686e00,
                    9.602749790376534644e-01,
                    1.153783826282389624e00,
                    9.985803685650396222e-01,
                    1.380760350579507412e00,
                    5.650085913155955541e-01,
                    1.128081823314222687e00,
                    9.183661577028273681e-01,
                    2.524349785478510744e-01,
                    8.705556518312643766e-01,
                    2.732400250932897068e-01,
                    9.425258520290759057e-01,
                    6.542226008944662663e-01,
                    8.035500034658151769e-01,
                    7.023263849932500635e-01,
                    2.430907339276444368e-01,
                    3.181438026929404583e-01,
                    1.185972720451959228e00,
                    5.340491654448616954e-01,
                    1.001002428997685545e00,
                    1.158922236516571003e00,
                    8.792715660547593126e-01,
                    4.646618345359387336e-01,
                    4.387114727986167750e-01,
                    7.478304496568382032e-01,
                    2.600754095897083729e-01,
                    1.240093066484742490e00,
                    1.412331183046170668e00,
                    6.971715636181546882e-01,
                    6.216613062281898250e-01,
                    3.340316318408108054e-01,
                    1.133183882281608490e00,
                    8.237913968441982204e-01,
                    6.251426052411237499e-01,
                ]
            ).reshape(raster.shape),
        ]

    def test_convert_to_db(self):
        """Testing convert_to_db function"""
        self.assertTrue(np.isnan(sp.convert_to_db(0)))
        self.assertEqual(sp.convert_to_db(10), 10)
        self.assertEqual(sp.convert_to_db(10, mode=gdt.DecibelConversion.POWER), 10)
        self.assertEqual(sp.convert_to_db(10, mode=gdt.DecibelConversion.AMPLITUDE), 20)
        np.testing.assert_array_equal(sp.convert_to_db([10, 100, 1000]), [10, 20, 30])
        np.testing.assert_array_equal(
            sp.convert_to_db([10, 100, 1000], mode=gdt.DecibelConversion.AMPLITUDE), [20, 40, 60]
        )

    def test_locate_max_2d(self):
        """Testing locate_max_2d function"""
        mat = np.zeros((10, 10))
        max_id = (4, 8)
        mat[max_id] = 1
        self.assertEqual(sp.locate_max_2d(mat), max_id)

    def test_crop_array_2d(self):
        """Testing crop_array_2d function"""
        mat = np.zeros((10, 10))
        mat[5, 5] = 1
        cropped = sp.crop_array_2d(mat, (5, 5))
        np.testing.assert_array_equal(sp.crop_array_2d(mat, (3, 3)).shape, (2, 2))
        np.testing.assert_array_equal(sp.crop_array_2d(mat, (4, 4)).shape, (4, 4))
        self.assertTrue(cropped.any())
        self.assertRaises(ValueError, sp.crop_array_2d, mat, (13, 13))
        self.assertFalse(sp.crop_array_2d(mat, (0, 0)).any())

    def test_modulate_data(self):
        """Testing modulate_data function"""
        mat = np.ones((10, 10))
        mod = sp.modulate_data(mat, np.array(1000))
        self.assertTrue(np.dtype(np.complex128) is sp.modulate_data(mat, np.array(0)).dtype)
        self.assertEqual(sp.modulate_data(mat, np.array(0)).sum(), 100)
        self.assertEqual(np.abs(sp.modulate_data(mat, np.array(1000)).sum()), 100)
        self.assertEqual(mat.shape, mod.shape)

    def test_radiometric_correction_case0(self):
        """Testing radiometric_correction function, BETA to GAMMA"""
        converted_raster_abs = np.abs(
            sp.radiometric_correction(
                data=raster,
                incidence_angle=incidence_angles,
                input_quantity=gdt.SARRadiometricQuantity.BETA_NOUGHT,
                output_quantity=gdt.SARRadiometricQuantity.GAMMA_NOUGHT,
            )
        )
        np.testing.assert_allclose(
            converted_raster_abs, self.expected_radiometric_conversions[0], atol=self.tolerance, rtol=0
        )

    def test_radiometric_correction_case1(self):
        """Testing radiometric_correction function, BETA to SIGMA"""
        converted_raster_abs = np.abs(
            sp.radiometric_correction(
                data=raster,
                incidence_angle=incidence_angles,
                input_quantity=gdt.SARRadiometricQuantity.BETA_NOUGHT,
                output_quantity=gdt.SARRadiometricQuantity.SIGMA_NOUGHT,
            )
        )
        np.testing.assert_allclose(
            converted_raster_abs, self.expected_radiometric_conversions[1], atol=self.tolerance, rtol=0
        )

    def test_radiometric_correction_case2(self):
        """Testing radiometric_correction function, GAMMA to BETA"""
        converted_raster_abs = np.abs(
            sp.radiometric_correction(
                data=raster,
                incidence_angle=incidence_angles,
                input_quantity=gdt.SARRadiometricQuantity.GAMMA_NOUGHT,
                output_quantity=gdt.SARRadiometricQuantity.BETA_NOUGHT,
            )
        )
        np.testing.assert_allclose(
            converted_raster_abs, self.expected_radiometric_conversions[2], atol=self.tolerance, rtol=0
        )

    def test_radiometric_correction_case3(self):
        """Testing radiometric_correction function, GAMMA to SIGMA"""
        converted_raster_abs = np.abs(
            sp.radiometric_correction(
                data=raster,
                incidence_angle=incidence_angles,
                input_quantity=gdt.SARRadiometricQuantity.GAMMA_NOUGHT,
                output_quantity=gdt.SARRadiometricQuantity.SIGMA_NOUGHT,
            )
        )
        np.testing.assert_allclose(
            converted_raster_abs, self.expected_radiometric_conversions[3], atol=self.tolerance, rtol=0
        )

    def test_radiometric_correction_case4(self):
        """Testing radiometric_correction function, SIGMA to BETA"""
        converted_raster_abs = np.abs(
            sp.radiometric_correction(
                data=raster,
                incidence_angle=incidence_angles,
                input_quantity=gdt.SARRadiometricQuantity.SIGMA_NOUGHT,
                output_quantity=gdt.SARRadiometricQuantity.BETA_NOUGHT,
            )
        )
        np.testing.assert_allclose(
            converted_raster_abs, self.expected_radiometric_conversions[4], atol=self.tolerance, rtol=0
        )

    def test_radiometric_correction_case5(self):
        """Testing radiometric_correction function, SIGMA to GAMMA"""
        converted_raster_abs = np.abs(
            sp.radiometric_correction(
                data=raster,
                incidence_angle=incidence_angles,
                input_quantity=gdt.SARRadiometricQuantity.SIGMA_NOUGHT,
                output_quantity=gdt.SARRadiometricQuantity.GAMMA_NOUGHT,
            )
        )
        np.testing.assert_allclose(
            converted_raster_abs, self.expected_radiometric_conversions[5], atol=self.tolerance, rtol=0
        )


if __name__ == "__main__":
    unittest.main()
